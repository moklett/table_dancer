SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (16.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.2ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:47', 'foos', '2011-09-14 14:47:47', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.2ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.4ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (5.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (13.0ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:47', 'foos', '2011-09-14 14:47:47', 'foos_danced', NULL, 'init')
SQL (4.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (6.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  BEGIN
SQL (0.6ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:47', 'foos', '2011-09-14 14:47:47', 'foos_danced', NULL, 'init')
SQL (3.0ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.1ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:47', 'foos', '2011-09-14 14:47:47', 'foos_danced', NULL, 'init')
SQL (11.7ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (6.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (25.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:47', 'foos', '2011-09-14 14:47:47', 'foos_danced', NULL, 'init')
SQL (2.1ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (33.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (209.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (11.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:48', 'foos', '2011-09-14 14:47:48', 'foos_danced', NULL, 'init')
SQL (3.7ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (2.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (12.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.3ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (78.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (167.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:49', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (11.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:49', 'foos', '2011-09-14 14:47:49', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:49', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.0ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (22.5ms)  TRUNCATE TABLE `foos`;
SQL (1.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (6.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:49', 'foos', '2011-09-14 14:47:49', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (58.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (84.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:50', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.2ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (11.9ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:50', 'foos', '2011-09-14 14:47:50', 'foos_danced', NULL, 'init')
SQL (4.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (77.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (76.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:50', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (13.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:50', 'foos', '2011-09-14 14:47:50', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (75.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:51', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.6ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:51', 'foos', '2011-09-14 14:47:51', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (81.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (160.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:52', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:52', `phase` = 'init' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (19.1ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:52', 'foos', '2011-09-14 14:47:52', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (66.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (167.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (84.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:52', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (4.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Columns (6.8ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.4ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:52', 1)
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:52', 2)
SQL (3.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:52', 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:53', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.5ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:53', 'foos', '2011-09-14 14:47:53', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.4ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (37.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (153.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (59.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (166.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (168.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:53', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (17.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (2.7ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:53', 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:53', 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:53', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:53', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (11.1ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:53', 'foos', '2011-09-14 14:47:53', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (150.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (164.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:54', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.0ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (1.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:53', 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:53', 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:53', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:54', `phase` = 'replay' WHERE `id` = 1
SQL (13.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (6.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:54', 'foos', '2011-09-14 14:47:54', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (64.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (168.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (74.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (142.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:55', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:55', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:44:54', 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:43:54', 3)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:43:54', 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:55', `phase` = 'init' WHERE `id` = 1
SQL (11.7ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (5.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:55', 'foos', '2011-09-14 14:47:55', 'foos_danced', NULL, 'init')
SQL (4.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (79.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (168.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (59.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:56', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:56', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:44:55', 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:43:55', 3)
SQL (16.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:43:55', 2)
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.5ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY event_time ASC, source_id ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (4.7ms)  TRUNCATE TABLE `foos`;
SQL (23.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:56', 'foos', '2011-09-14 14:47:56', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (48.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (134.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (1.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:56', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:56', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:44:56', 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:43:56', 3)
SQL (28.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:43:56', 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (4.6ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:56', 'foos', '2011-09-14 14:47:56', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.4ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (62.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (134.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:57', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:57', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:44:56', 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:43:56', 3)
SQL (21.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:43:56', 2)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:57', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.4ms)  TRUNCATE TABLE `foos`;
SQL (23.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:47:57', 'foos', '2011-09-14 14:47:57', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (62.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (331.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (145.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (208.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:58', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:58', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:44:57', 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:43:57', 3)
SQL (9.8ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:43:57', 2)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:47:58', `phase` = 'cutover' WHERE `id` = 1
SQL (4.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (6.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.6ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (7.0ms)  SHOW TABLES
SQL (0.6ms)  SELECT DATABASE() as db
SQL (1.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (16.6ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:48:46', 'foos', '2011-09-14 14:48:46', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (43.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (151.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (59.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (133.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (59.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:48:46', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.3ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:48:46', `phase` = 'replay' WHERE `id` = 1
SQL (17.2ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.9ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:45:46', 1)
SQL (2.9ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:44:46', 3)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:44:46', 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (18.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.2ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (2.8ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.1ms)  TRUNCATE TABLE `table_dances`;
SQL (8.4ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.8ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.4ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:50:17', 'foos', '2011-09-14 14:50:17', 'foos_danced', NULL, 'init')
SQL (0.7ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (41.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (184.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (126.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:50:18', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:50:18', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.8ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:47:17', 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:46:17', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:46:17', 2)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (21.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.0ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.4ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.8ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (16.8ms)  TRUNCATE TABLE `foos`;
SQL (17.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.9ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:51:47', 'foos', '2011-09-14 14:51:47', 'foos_danced', NULL, 'init')
SQL (1.1ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (71.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (229.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (167.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:51:48', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:51:48', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:48:47', 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:47:47', 3)
SQL (17.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:47:47', 2)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.9ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (8.7ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (13.0ms)  TRUNCATE TABLE `foos`;
SQL (2.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (4.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.6ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:52:24', 'foos', '2011-09-14 14:52:24', 'foos_danced', NULL, 'init')
SQL (0.7ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (49.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (207.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:52:25', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:52:25', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.1ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:49:24', 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:48:24', 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:48:24', 2)
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (13.1ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (2.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.5ms)  TRUNCATE TABLE `foos`;
SQL (30.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:52:57', 'foos', '2011-09-14 14:52:57', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (44.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (200.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (59.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:52:58', `phase` = 'copy' WHERE `id` = 1
SQL (1.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:52:58', `phase` = 'replay' WHERE `id` = 1
SQL (25.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (11.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:49:57', 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:48:57', 3)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:48:57', 2)
SQL (1.4ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (15.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.4ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (1.9ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (2.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (22.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:53:14', 'foos', '2011-09-14 14:53:14', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (191.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (142.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (59.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:53:15', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:53:15', `phase` = 'replay' WHERE `id` = 1
SQL (15.5ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:50:14', 1)
SQL (3.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:49:14', 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:49:14', 2)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) AND (`table_dance_replays`.`performed` = 0) ORDER BY event_time ASC, source_id ASC
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.1ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (23.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.9ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.7ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (28.1ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.8ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:54:42', 'foos', '2011-09-14 14:54:42', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (40.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (160.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:54:42', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:54:42', `phase` = 'replay' WHERE `id` = 1
SQL (14.5ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.9ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'insert', '2011-09-14 14:51:42', 1)
SQL (2.9ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'update', '2011-09-14 14:50:42', 3)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, NULL, 'delete', '2011-09-14 14:50:42', 2)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) AND (`table_dance_replays`.`performed` = 0) ORDER BY event_time ASC, source_id ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (9.5ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (20.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.2ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (44.9ms)  CREATE TABLE `table_dances` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `source_table` varchar(255), `dest_table` varchar(255), `phase` varchar(255) DEFAULT 'init', `last_copy_id` int(11), `created_at` datetime, `updated_at` datetime) ENGINE=InnoDB
SQL (0.4ms)  SHOW KEYS FROM `table_dances`
SQL (137.1ms)  CREATE INDEX `index_table_dances_on_source_table` ON `table_dances` (`source_table`)
SQL (0.4ms)  SHOW KEYS FROM `table_dances`
SQL (66.4ms)  CREATE INDEX `index_table_dances_on_phase` ON `table_dances` (`phase`)
SQL (0.3ms)  SHOW KEYS FROM `table_dances`
SQL (84.5ms)  CREATE INDEX `index_table_dances_on_source_table_and_phase` ON `table_dances` (`source_table`, `phase`)
SQL (0.7ms)  SHOW TABLES
SQL (77.6ms)  CREATE TABLE `table_dance_replays` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `table_dance_id` int(11), `instruction` varchar(255), `event_time` datetime, `source_id` int(11), `performed` tinyint(1) DEFAULT 0) ENGINE=InnoDB
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (94.3ms)  CREATE INDEX `index_table_dance_replays_on_table_dance_id` ON `table_dance_replays` (`table_dance_id`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (68.1ms)  CREATE INDEX `index_table_dance_replays_on_event_time` ON `table_dance_replays` (`event_time`)
SQL (0.3ms)  SHOW KEYS FROM `table_dance_replays`
SQL (82.4ms)  CREATE INDEX `index_table_dance_replays_on_table_dance_id_and_event_time` ON `table_dance_replays` (`table_dance_id`, `event_time`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (106.7ms)  CREATE INDEX `index_table_dance_replays_on_performed` ON `table_dance_replays` (`performed`)
SQL (0.3ms)  SHOW KEYS FROM `table_dance_replays`
SQL (84.5ms)  CREATE INDEX `by_dance_time_and_performed` ON `table_dance_replays` (`table_dance_id`, `event_time`, `performed`)
SQL (0.5ms)  SHOW KEYS FROM `table_dance_replays`
SQL (75.1ms)  CREATE INDEX `index_table_dance_replays_on_source_id` ON `table_dance_replays` (`source_id`)
SQL (0.5ms)  SHOW KEYS FROM `table_dance_replays`
SQL (74.4ms)  CREATE INDEX `by_dance_and_source` ON `table_dance_replays` (`table_dance_id`, `source_id`)
SQL (0.8ms)  SHOW KEYS FROM `table_dance_replays`
SQL (81.4ms)  CREATE INDEX `by_dance_time_and_source` ON `table_dance_replays` (`table_dance_id`, `event_time`, `source_id`)
SQL (0.5ms)  SHOW KEYS FROM `table_dance_replays`
SQL (83.0ms)  CREATE INDEX `by_dance_time_source_and_performed` ON `table_dance_replays` (`table_dance_id`, `event_time`, `source_id`, `performed`)
SQL (0.6ms)  SHOW TABLES
SQL (87.1ms)  CREATE TABLE `foos` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY) ENGINE=InnoDB
SQL (0.3ms)  SHOW TABLES
SQL (82.6ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY) ENGINE=InnoDB
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (17.1ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 14:56:04', 'foos', '2011-09-14 14:56:04', 'foos_danced', NULL, 'init')
SQL (2.6ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (122.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (135.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:56:04', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 14:56:04', `phase` = 'replay' WHERE `id` = 1
SQL (1.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 14:53:04', 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 14:52:04', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 14:52:04', 2)
SQL (0.7ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (17.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (5.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (2.3ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (21.8ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:06:02', 'foos', '2011-09-14 15:06:02', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (63.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (238.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (185.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (84.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (184.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:06:03', `phase` = 'copy' WHERE `id` = 1
SQL (1.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:06:03', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.1ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 15:03:02', 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 15:02:02', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 15:02:02', 2)
SQL (14.8ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (4.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (1.4ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.6ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (12.6ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (20.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:06:28', 'foos', '2011-09-14 15:06:28', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (39.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (176.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (66.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:06:29', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:06:29', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 15:03:28', 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 15:02:28', 3)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 15:02:28', 2)
SQL (0.5ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.7ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (12.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (1.4ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.5ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (18.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (9.5ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (1.0ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:07:33', 'foos', '2011-09-14 15:07:33', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (32.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (167.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:07:34', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:07:34', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.0ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 15:04:33', 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 15:03:33', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 15:03:33', 2)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (26.5ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SELECT DATABASE() as db
SQL (2.5ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (10.9ms)  TRUNCATE TABLE `foos`;
SQL (4.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (43.0ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:11:41', 'foos', '2011-09-14 15:11:41', 'foos_danced', NULL, 'init')
SQL (0.8ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.3ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (94.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (316.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:11:42', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:11:42', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 15:08:41', 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 15:07:41', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 15:07:41', 2)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.9ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (5.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (0.3ms)  SELECT DATABASE() as db
SQL (10.4ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (12.3ms)  TRUNCATE TABLE `foos`;
SQL (14.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:19:45', 'foos', '2011-09-14 15:19:45', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (201.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.9ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:19:46', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:19:46', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 15:16:45', 1)
SQL (10.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 15:15:45', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 15:15:45', 2)
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (2.5ms)  TRUNCATE TABLE `foos`;
SQL (15.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.7ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (1.5ms)  SHOW TABLES
SQL (0.2ms)  SELECT DATABASE() as db
SQL (1.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.7ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (11.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:20:31', 'foos', '2011-09-14 15:20:31', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (40.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (183.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:20:31', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:20:31', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 15:17:31', 1)
SQL (11.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 15:16:31', 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 15:16:31', 2)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
 Columns (10.5ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (25.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (29.5ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.4ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (8.7ms)  SELECT DATABASE() as db
SQL (1.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (9.2ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:20:50', 'foos', '2011-09-14 15:20:50', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (49.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (142.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:20:51', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:20:51', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'insert', '2011-09-14 15:17:50', 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'update', '2011-09-14 15:16:50', 3)
SQL (1.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `event_time`, `source_id`) VALUES(1, 0, 'delete', '2011-09-14 15:16:50', 2)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (17.4ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (8.8ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (26.6ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (19.2ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (13.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.9ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.5ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:29:36', 'foos', '2011-09-14 15:29:36', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (15.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` VALUES(DEFAULT)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (59.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (233.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (69.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (149.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:29:37', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (16.2ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.2ms)  SHOW TABLES
SQL (0.4ms)  SHOW TABLES
SQL (38.6ms)  CREATE TABLE `table_dances` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `source_table` varchar(255), `dest_table` varchar(255), `phase` varchar(255) DEFAULT 'init', `last_copy_id` int(11), `created_at` datetime, `updated_at` datetime) ENGINE=InnoDB
SQL (0.4ms)  SHOW KEYS FROM `table_dances`
SQL (126.9ms)  CREATE INDEX `index_table_dances_on_source_table` ON `table_dances` (`source_table`)
SQL (0.3ms)  SHOW KEYS FROM `table_dances`
SQL (85.0ms)  CREATE INDEX `index_table_dances_on_phase` ON `table_dances` (`phase`)
SQL (0.4ms)  SHOW KEYS FROM `table_dances`
SQL (80.5ms)  CREATE INDEX `index_table_dances_on_source_table_and_phase` ON `table_dances` (`source_table`, `phase`)
SQL (0.4ms)  SHOW TABLES
SQL (88.1ms)  CREATE TABLE `table_dance_replays` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `table_dance_id` int(11), `instruction` varchar(255), `event_time` datetime, `source_id` int(11), `source_table` varchar(255), `dest_table` varchar(255), `performed` tinyint(1) DEFAULT 0) ENGINE=InnoDB
SQL (1.2ms)  SHOW KEYS FROM `table_dance_replays`
SQL (111.7ms)  CREATE INDEX `index_table_dance_replays_on_table_dance_id` ON `table_dance_replays` (`table_dance_id`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (76.1ms)  CREATE INDEX `index_table_dance_replays_on_event_time` ON `table_dance_replays` (`event_time`)
SQL (0.3ms)  SHOW KEYS FROM `table_dance_replays`
SQL (97.4ms)  CREATE INDEX `index_table_dance_replays_on_table_dance_id_and_event_time` ON `table_dance_replays` (`table_dance_id`, `event_time`)
SQL (0.8ms)  SHOW KEYS FROM `table_dance_replays`
SQL (164.2ms)  CREATE INDEX `index_table_dance_replays_on_performed` ON `table_dance_replays` (`performed`)
SQL (0.3ms)  SHOW KEYS FROM `table_dance_replays`
SQL (121.2ms)  CREATE INDEX `by_dance_time_and_performed` ON `table_dance_replays` (`table_dance_id`, `event_time`, `performed`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (115.5ms)  CREATE INDEX `index_table_dance_replays_on_source_id` ON `table_dance_replays` (`source_id`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (92.1ms)  CREATE INDEX `by_dance_and_source` ON `table_dance_replays` (`table_dance_id`, `source_id`)
SQL (0.5ms)  SHOW KEYS FROM `table_dance_replays`
SQL (81.4ms)  CREATE INDEX `by_dance_time_and_source` ON `table_dance_replays` (`table_dance_id`, `event_time`, `source_id`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (83.1ms)  CREATE INDEX `by_dance_time_source_and_performed` ON `table_dance_replays` (`table_dance_id`, `event_time`, `source_id`, `performed`)
SQL (0.4ms)  SHOW TABLES
SQL (78.3ms)  CREATE TABLE `foos` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.5ms)  SHOW TABLES
SQL (82.5ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (12.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (6.4ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (7.5ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.0ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:33', 'foos', '2011-09-14 15:30:33', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.7ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (9.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (11.4ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (9.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.0ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (12.5ms)  TRUNCATE TABLE `foos`;
SQL (0.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (24.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (9.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.8ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:33', 'foos', '2011-09-14 15:30:33', 'foos_danced', NULL, 'init')
SQL (1.8ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (7.6ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:33', 'foos', '2011-09-14 15:30:33', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.0ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (4.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:33', 'foos', '2011-09-14 15:30:33', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (3.9ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:33', 'foos', '2011-09-14 15:30:33', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (146.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.3ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (1.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (13.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:34', 'foos', '2011-09-14 15:30:34', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (6.6ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (82.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (168.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:35', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (11.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:35', 'foos', '2011-09-14 15:30:35', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:35', `phase` = 'copy' WHERE `id` = 1
SQL (2.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (14.4ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:35', 'foos', '2011-09-14 15:30:35', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (73.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (83.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (154.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:35', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.2ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (11.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:35', 'foos', '2011-09-14 15:30:35', 'foos_danced', NULL, 'init')
SQL (5.0ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (76.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (157.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:36', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (15.2ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:36', 'foos', '2011-09-14 15:30:36', 'foos_danced', NULL, 'init')
SQL (4.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (74.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (150.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:37', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.3ms)  TRUNCATE TABLE `foos`;
SQL (16.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:37', 'foos', '2011-09-14 15:30:37', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (80.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (151.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:38', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:38', `phase` = 'init' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.5ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:38', 'foos', '2011-09-14 15:30:38', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (70.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (83.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (160.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:38', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.8ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.2ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:38', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:38', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:38', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:38', `phase` = 'replay' WHERE `id` = 1
SQL (13.0ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:38', 'foos', '2011-09-14 15:30:38', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (40.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (92.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (168.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:39', `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (10.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:38', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:38', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:38', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:39', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:39', 'foos', '2011-09-14 15:30:39', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (72.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:40', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:39', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:39', NULL, 2)
SQL (24.9ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:39', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:40', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.3ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:40', 'foos', '2011-09-14 15:30:40', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (58.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (151.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.5ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:41', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:40', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:41', `phase` = 'replay' WHERE `id` = 1
SQL (1.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:41', `phase` = 'init' WHERE `id` = 1
SQL (11.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (6.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:41', 'foos', '2011-09-14 15:30:41', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (142.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (135.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:41', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (14.1ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.3ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (1.2ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:41', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:41', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY event_time ASC, source_id ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (12.8ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:41', 'foos', '2011-09-14 15:30:41', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.1ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (77.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (142.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (168.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:42', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.3ms)  UNLOCK TABLES;
SQL (0.3ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.2ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:41', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:42', `phase` = 'replay' WHERE `id` = 1
SQL (24.1ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:42', 'foos', '2011-09-14 15:30:42', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (6.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (55.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (142.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:43', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.3ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:42', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:43', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (15.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:30:43', 'foos', '2011-09-14 15:30:43', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (48.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (229.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (151.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (305.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (59.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:44', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (19.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (1.8ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:30:43', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:30:44', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (table_dance_replays.id >= 0) AND ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY table_dance_replays.id ASC LIMIT 1000
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (12.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.4ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (9.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (21.1ms)  TRUNCATE TABLE `foos`;
SQL (15.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.4ms)  SHOW FIELDS FROM `table_dances`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:31', 'foos', '2011-09-14 15:48:31', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (21.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.2ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.0ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (3.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:31', 'foos', '2011-09-14 15:48:31', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (7.6ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.4ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:31', 'foos', '2011-09-14 15:48:31', 'foos_danced', NULL, 'init')
SQL (2.3ms)  COMMIT
SQL (6.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.4ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:31', 'foos', '2011-09-14 15:48:31', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (3.3ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  BEGIN
SQL (0.6ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:31', 'foos', '2011-09-14 15:48:31', 'foos_danced', NULL, 'init')
SQL (8.7ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (47.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (209.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (75.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.7ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:32', 'foos', '2011-09-14 15:48:32', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.3ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (151.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:32', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (9.6ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:32', 'foos', '2011-09-14 15:48:32', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:32', `phase` = 'copy' WHERE `id` = 1
SQL (3.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (22.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (9.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:33', 'foos', '2011-09-14 15:48:33', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (70.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (150.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (142.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (160.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:33', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (178.1ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (16.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:33', 'foos', '2011-09-14 15:48:33', 'foos_danced', NULL, 'init')
SQL (9.2ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (97.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (205.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (167.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:34', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (11.8ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:34', 'foos', '2011-09-14 15:48:34', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (68.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:35', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.4ms)  TRUNCATE TABLE `foos`;
SQL (11.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:35', 'foos', '2011-09-14 15:48:35', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (68.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (150.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:36', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (10.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:36', `phase` = 'init' WHERE `id` = 1
SQL (7.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (6.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:36', 'foos', '2011-09-14 15:48:36', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (71.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:36', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (11.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.0ms)  COMMIT
TableDancer::TableDanceReplay Columns (7.0ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:36', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:36', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:36', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:36', `phase` = 'replay' WHERE `id` = 1
SQL (1.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.9ms)  TRUNCATE TABLE `foos`;
SQL (14.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (18.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:36', 'foos', '2011-09-14 15:48:36', 'foos_danced', NULL, 'init')
SQL (4.6ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (41.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (150.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:37', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:36', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:36', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:36', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:37', `phase` = 'replay' WHERE `id` = 1
SQL (1.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (16.3ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:37', 'foos', '2011-09-14 15:48:37', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (142.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (83.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:38', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:37', NULL, 1)
SQL (1.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:37', NULL, 2)
SQL (13.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:48:37', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:38', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (3.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:38', 'foos', '2011-09-14 15:48:38', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (73.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (158.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:39', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (10.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:39', 'foos', '2011-09-14 15:48:39', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (79.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (71.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (176.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:39', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (10.8ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:39', 'foos', '2011-09-14 15:48:39', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (73.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (167.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (81.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (168.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:40', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (13.8ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:40', 'foos', '2011-09-14 15:48:40', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.7ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (75.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (210.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (40.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (167.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (143.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (384.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:41', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.0ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:48:41', 'foos', '2011-09-14 15:48:41', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (76.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (150.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (160.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:48:42', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (21.6ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.1ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (13.7ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (26.2ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (10.3ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:16', 'foos', '2011-09-14 15:49:16', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (17.4ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (10.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.8ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.6ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:16', 'foos', '2011-09-14 15:49:16', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (7.6ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:16', 'foos', '2011-09-14 15:49:16', 'foos_danced', NULL, 'init')
SQL (3.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (6.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (13.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:16', 'foos', '2011-09-14 15:49:16', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (3.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:16', 'foos', '2011-09-14 15:49:16', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (49.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (215.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (11.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:17', 'foos', '2011-09-14 15:49:17', 'foos_danced', NULL, 'init')
SQL (3.7ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (68.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:18', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.3ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (18.5ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.4ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.5ms)  BEGIN
SQL (0.7ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:18', 'foos', '2011-09-14 15:49:18', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.4ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:18', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (6.7ms)  TRUNCATE TABLE `foos`;
SQL (23.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:18', 'foos', '2011-09-14 15:49:18', 'foos_danced', NULL, 'init')
SQL (1.1ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (56.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (184.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (75.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (142.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:19', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.4ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (11.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:19', 'foos', '2011-09-14 15:49:19', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (74.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:19', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (14.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:19', 'foos', '2011-09-14 15:49:19', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (71.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (168.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.3ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:20', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.1ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:20', 'foos', '2011-09-14 15:49:20', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (96.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (175.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (66.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:21', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:21', `phase` = 'init' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.7ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:21', 'foos', '2011-09-14 15:49:21', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (45.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (150.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (167.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:22', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.2ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.1ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:21', NULL, 1)
SQL (15.0ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:21', NULL, 2)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:21', NULL, 3)
SQL (3.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:22', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 'insert') AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (3.6ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:22', 'foos', '2011-09-14 15:49:22', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (36.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (77.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (148.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:22', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (16.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.9ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:22', NULL, 1)
SQL (5.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:22', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:22', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:22', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (9.6ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.4ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:23', 'foos', '2011-09-14 15:49:23', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (58.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (186.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (91.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (167.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:23', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:23', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:23', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:23', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:23', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (26.6ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:23', 'foos', '2011-09-14 15:49:23', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
 Columns (5.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.6ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (11.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.9ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (47.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (68.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:24', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (11.4ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:23', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:24', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:24', `phase` = 'init' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (17.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:24', 'foos', '2011-09-14 15:49:24', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (49.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (175.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.4ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:25', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.9ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:24', NULL, 1)
SQL (1.6ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:25', `phase` = 'replay' WHERE `id` = 1
SQL (14.0ms)  COMMIT
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (5.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:25', 'foos', '2011-09-14 15:49:25', 'foos_danced', NULL, 'init')
SQL (3.6ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (11.6ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (54.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (192.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (175.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:26', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:25', NULL, 1)
SQL (8.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:26', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.8ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:26', 'foos', '2011-09-14 15:49:26', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.8ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (50.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (160.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (159.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (218.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:26', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (2.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (22.9ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (2.7ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:26', NULL, 1)
SQL (16.4ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:27', `phase` = 'replay' WHERE `id` = 1
SQL (6.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:27', `phase` = 'cutover' WHERE `id` = 1
SQL (1.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.2ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:49:27', 'foos', '2011-09-14 15:49:27', 'foos_danced', NULL, 'init')
SQL (1.1ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (206.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (159.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (151.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (75.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:27', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (20.0ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (1.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:49:27', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:27', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:49:27', `phase` = 'cutover' WHERE `id` = 1
SQL (12.1ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (7.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (26.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (14.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.4ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:51:20', 'foos', '2011-09-14 15:51:20', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
 Columns (5.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.3ms)  BEGIN
 Create (0.5ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.5ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (39.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (175.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (58.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (58.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:51:21', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (21.7ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (3.0ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:51:20', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:51:21', `phase` = 'replay' WHERE `id` = 1
SQL (1.2ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (9.3ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (4.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.4ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (9.8ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.8ms)  SHOW FIELDS FROM `table_dances`
SQL (0.2ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:52:16', 'foos', '2011-09-14 15:52:16', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (12.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (28.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (243.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (142.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (67.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (268.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.4ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (1.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:52:17', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (60.3ms)  COMMIT
SQL (0.3ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.4ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.3ms)  BEGIN
 Update (0.6ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (21.8ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.4ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (81.1ms)  COMMIT
 Load (0.5ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  BEGIN
TableDancer::TableDanceReplay Create (0.5ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:52:16', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:52:18', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.3ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (16.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.5ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (4.5ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (22.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (15.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 15:53:11', 'foos', '2011-09-14 15:53:11', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (8.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.6ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (12.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.8ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (35.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (184.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'insert', CURRENT_TIMESTAMP, NEW.id);
SQL (67.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'update', CURRENT_TIMESTAMP, NEW.id);
SQL (59.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 'delete', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:53:11', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.2ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.9ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 'insert', NULL, '2011-09-14 15:53:11', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 15:53:12', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (7.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (5.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (9.3ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.3ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  SELECT DATABASE() as db
SQL (25.8ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (27.1ms)  TRUNCATE TABLE `foos`;
SQL (11.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.9ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:01:55', 'foos', '2011-09-14 16:01:55', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (8.8ms)  SHOW FIELDS FROM `foos`
SQL (0.2ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (12.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.5ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.6ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_table_refNEWid1;
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.7ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (3.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SET SQL_AUTO_IS_NULL=0
SQL (8.9ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (6.7ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (10.9ms)  TRUNCATE TABLE `foos`;
SQL (21.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (1.0ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:04:08', 'foos', '2011-09-14 16:04:08', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (6.9ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (44.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (216.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (60.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:04:09', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (19.9ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (1.3ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.8ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:04:08', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:04:10', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.1ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.7ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.2ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (53.7ms)  CREATE TABLE `table_dances` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `source_table` varchar(255), `dest_table` varchar(255), `phase` varchar(255) DEFAULT 'init', `last_copy_id` int(11), `created_at` datetime, `updated_at` datetime) ENGINE=InnoDB
SQL (0.4ms)  SHOW KEYS FROM `table_dances`
SQL (87.8ms)  CREATE INDEX `index_table_dances_on_source_table` ON `table_dances` (`source_table`)
SQL (0.4ms)  SHOW KEYS FROM `table_dances`
SQL (75.4ms)  CREATE INDEX `index_table_dances_on_phase` ON `table_dances` (`phase`)
SQL (1.2ms)  SHOW KEYS FROM `table_dances`
SQL (107.2ms)  CREATE INDEX `index_table_dances_on_source_table_and_phase` ON `table_dances` (`source_table`, `phase`)
SQL (0.4ms)  SHOW TABLES
SQL (76.1ms)  CREATE TABLE `table_dance_replays` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `table_dance_id` int(11), `instruction` int(11), `event_time` datetime, `source_id` int(11), `source_table` varchar(255), `dest_table` varchar(255), `performed` tinyint(1) DEFAULT 0) ENGINE=InnoDB
SQL (0.3ms)  SHOW KEYS FROM `table_dance_replays`
SQL (95.8ms)  CREATE INDEX `index_table_dance_replays_on_table_dance_id` ON `table_dance_replays` (`table_dance_id`)
SQL (0.3ms)  SHOW KEYS FROM `table_dance_replays`
SQL (84.4ms)  CREATE INDEX `index_table_dance_replays_on_event_time` ON `table_dance_replays` (`event_time`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (105.4ms)  CREATE INDEX `index_table_dance_replays_on_table_dance_id_and_event_time` ON `table_dance_replays` (`table_dance_id`, `event_time`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (86.7ms)  CREATE INDEX `index_table_dance_replays_on_performed` ON `table_dance_replays` (`performed`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (94.5ms)  CREATE INDEX `by_dance_time_and_performed` ON `table_dance_replays` (`table_dance_id`, `event_time`, `performed`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (88.6ms)  CREATE INDEX `index_table_dance_replays_on_source_id` ON `table_dance_replays` (`source_id`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (82.3ms)  CREATE INDEX `index_table_dance_replays_on_instruction` ON `table_dance_replays` (`instruction`)
SQL (0.4ms)  SHOW KEYS FROM `table_dance_replays`
SQL (101.5ms)  CREATE INDEX `by_dance_instr` ON `table_dance_replays` (`table_dance_id`, `instruction`)
SQL (0.5ms)  SHOW KEYS FROM `table_dance_replays`
SQL (88.9ms)  CREATE INDEX `by_dance_time_instr` ON `table_dance_replays` (`table_dance_id`, `event_time`, `instruction`)
SQL (0.5ms)  SHOW KEYS FROM `table_dance_replays`
SQL (91.3ms)  CREATE INDEX `by_dance_time_instr_performed` ON `table_dance_replays` (`table_dance_id`, `event_time`, `instruction`, `performed`)
SQL (0.4ms)  SHOW TABLES
SQL (77.2ms)  CREATE TABLE `foos` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.4ms)  SHOW TABLES
SQL (82.4ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.7ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (21.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.3ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:05:21', 'foos', '2011-09-14 16:05:21', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (128.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (117.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (125.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:05:21', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.2ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.6ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.9ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:05:21', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:05:22', `phase` = 'replay' WHERE `id` = 1
SQL (22.8ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (4.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.8ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (27.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.2ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:06:35', 'foos', '2011-09-14 16:06:35', 'foos_danced', NULL, 'init')
SQL (1.3ms)  COMMIT
 Columns (10.0ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (15.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.1ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (41.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (192.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (59.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:06:36', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.0ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
 Load (0.4ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.8ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:06:35', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:06:39', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (47.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.9ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.3ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (1.6ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (2.0ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.5ms)  TRUNCATE TABLE `foos`;
SQL (22.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.7ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:06:48', 'foos', '2011-09-14 16:06:48', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
 Columns (4.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.8ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (16.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (39.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (177.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (58.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (154.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:06:49', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.6ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.3ms)  SET autocommit=1;
 Load (0.6ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.2ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:06:48', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:06:52', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (20.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (9.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (3.7ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.4ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (8.0ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (14.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:12:41', 'foos', '2011-09-14 16:12:41', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (12.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.9ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.5ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (205.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (143.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:12:41', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (2.5ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:12:41', NULL, 1)
SQL (1.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:12:45', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (17.1ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.7ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (2.0ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (28.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:15:08', 'foos', '2011-09-14 16:15:08', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
SQL (0.0ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (8.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (4.5ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (6.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (1.9ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (4.6ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (33.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:15:31', 'foos', '2011-09-14 16:15:31', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (10.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (28.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (209.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (58.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:15:31', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (15.8ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:15:31', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:15:34', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (13.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (1.7ms)  SHOW TABLES
SQL (4.3ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (14.0ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (26.6ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (10.3ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (11.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.0ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:01', 'foos', '2011-09-14 16:25:01', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (54.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (133.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.9ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (173.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:02', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.7ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (2.1ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:01', NULL, 1)
SQL (16.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:02', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (4.0ms)  TRUNCATE TABLE `foos`;
SQL (23.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (4.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (17.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:39', 'foos', '2011-09-14 16:25:39', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (14.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.3ms)  TRUNCATE TABLE `foos`;
SQL (4.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.9ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:39', 'foos', '2011-09-14 16:25:39', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.2ms)  TRUNCATE TABLE `foos`;
SQL (3.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (9.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (1.6ms)  BEGIN
SQL (0.7ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:39', 'foos', '2011-09-14 16:25:39', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (9.3ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:39', 'foos', '2011-09-14 16:25:39', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (23.0ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:39', 'foos', '2011-09-14 16:25:39', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (47.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (125.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (2.4ms)  TRUNCATE TABLE `foos`;
SQL (15.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:40', 'foos', '2011-09-14 16:25:40', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (77.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:40', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (17.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:40', 'foos', '2011-09-14 16:25:40', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:40', `phase` = 'copy' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (21.6ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:40', 'foos', '2011-09-14 16:25:40', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (152.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:41', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (3.0ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (9.6ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:41', 'foos', '2011-09-14 16:25:41', 'foos_danced', NULL, 'init')
SQL (0.7ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (74.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:42', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.8ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:42', 'foos', '2011-09-14 16:25:42', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.5ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:42', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (9.2ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:42', 'foos', '2011-09-14 16:25:42', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (63.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (141.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (117.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (151.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:43', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (2.1ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (24.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:43', `phase` = 'init' WHERE `id` = 1
SQL (2.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (6.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:43', 'foos', '2011-09-14 16:25:43', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (140.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (118.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.4ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:43', `phase` = 'copy' WHERE `id` = 1
SQL (1.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.4ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (3.0ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:43', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:43', NULL, 2)
SQL (3.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:43', NULL, 3)
SQL (6.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:44', `phase` = 'replay' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.8ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:44', 'foos', '2011-09-14 16:25:44', 'foos_danced', NULL, 'init')
SQL (3.1ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.3ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (34.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (73.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (142.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.5ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:44', `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:44', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:44', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:44', NULL, 3)
SQL (15.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:44', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (5.0ms)  TRUNCATE TABLE `foos`;
SQL (15.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:44', 'foos', '2011-09-14 16:25:44', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (55.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (117.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (143.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:45', `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:44', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:44', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:44', NULL, 3)
SQL (1.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:45', `phase` = 'replay' WHERE `id` = 1
SQL (14.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (5.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:45', 'foos', '2011-09-14 16:25:45', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
SQL (82.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.1ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.2ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (126.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:45', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:45', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:45', `phase` = 'replay' WHERE `id` = 1
SQL (9.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:46', `phase` = 'init' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (4.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:46', 'foos', '2011-09-14 16:25:46', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (58.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.6ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.9ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (173.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (150.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:46', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.6ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:46', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:46', `phase` = 'replay' WHERE `id` = 1
SQL (26.8ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:46', 'foos', '2011-09-14 16:25:46', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (43.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.0ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:47', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.2ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:46', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:47', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:47', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (16.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:47', 'foos', '2011-09-14 16:25:47', 'foos_danced', NULL, 'init')
SQL (4.9ms)  COMMIT
SQL (56.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.8ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:47', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:47', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:47', `phase` = 'replay' WHERE `id` = 1
SQL (1.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:47', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (21.1ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:25:48', 'foos', '2011-09-14 16:25:48', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (50.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (151.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:48', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (26.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (3.0ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:25:48', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:48', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:25:48', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (11.4ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (14.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:40', 'foos', '2011-09-14 16:26:40', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (17.7ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.9ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.0ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.6ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (5.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (3.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:40', 'foos', '2011-09-14 16:26:40', 'foos_danced', NULL, 'init')
SQL (1.1ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (7.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:40', 'foos', '2011-09-14 16:26:40', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (8.8ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:40', 'foos', '2011-09-14 16:26:40', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (3.9ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:40', 'foos', '2011-09-14 16:26:40', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (36.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (108.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (1.9ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (20.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:41', 'foos', '2011-09-14 16:26:41', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (95.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (155.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:41', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.8ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:41', 'foos', '2011-09-14 16:26:41', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:41', `phase` = 'copy' WHERE `id` = 1
SQL (3.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.7ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.0ms)  TRUNCATE TABLE `foos`;
SQL (8.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:42', 'foos', '2011-09-14 16:26:42', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (55.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (76.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (176.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:42', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.1ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (15.9ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:42', 'foos', '2011-09-14 16:26:42', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (60.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (143.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:43', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (20.3ms)  TRUNCATE TABLE `foos`;
SQL (1.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:43', 'foos', '2011-09-14 16:26:43', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (72.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (87.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (163.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.5ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:43', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (17.0ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:43', 'foos', '2011-09-14 16:26:43', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (74.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (182.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:44', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (15.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:44', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (5.0ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:44', 'foos', '2011-09-14 16:26:44', 'foos_danced', NULL, 'init')
SQL (3.2ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (71.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (143.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:45', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:44', NULL, 1)
SQL (1.8ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:44', NULL, 2)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:44', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:45', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (17.4ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:45', 'foos', '2011-09-14 16:26:45', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (32.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (94.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (156.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:45', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.2ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:45', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:45', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:45', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:45', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (9.9ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:46', 'foos', '2011-09-14 16:26:46', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (57.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (144.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (149.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:46', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (18.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.9ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:46', NULL, 1)
SQL (1.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:46', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:46', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:46', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.1ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:46', 'foos', '2011-09-14 16:26:46', 'foos_danced', NULL, 'init')
SQL (4.7ms)  COMMIT
SQL (83.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (151.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:47', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:46', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:47', `phase` = 'replay' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:47', `phase` = 'init' WHERE `id` = 1
SQL (14.0ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (6.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.4ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:47', 'foos', '2011-09-14 16:26:47', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
SQL (67.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (89.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.3ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:48', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:47', NULL, 1)
SQL (11.0ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:48', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.4ms)  TRUNCATE TABLE `foos`;
SQL (23.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (1.1ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:48', 'foos', '2011-09-14 16:26:48', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
SQL (44.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (181.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (143.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:48', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:48', NULL, 1)
SQL (0.8ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:48', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:48', `phase` = 'cutover' WHERE `id` = 1
SQL (15.1ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (4.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:48', 'foos', '2011-09-14 16:26:48', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (50.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (159.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:49', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:48', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:49', `phase` = 'replay' WHERE `id` = 1
SQL (1.0ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:49', `phase` = 'cutover' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (10.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:26:49', 'foos', '2011-09-14 16:26:49', 'foos_danced', NULL, 'init')
SQL (4.5ms)  COMMIT
SQL (71.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (76.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '1', CURRENT_TIMESTAMP, NEW.id);
SQL (202.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '2', CURRENT_TIMESTAMP, NEW.id);
SQL (177.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, '3', CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.5ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:50', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (6.8ms)  COMMIT
SQL (0.5ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.4ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.3ms)  BEGIN
 Update (3.1ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.2ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.2ms)  BEGIN
 Destroy (0.4ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:26:49', NULL, 1)
SQL (0.9ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:50', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.5ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:26:50', `phase` = 'cutover' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (12.4ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.2ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (14.4ms)  TRUNCATE TABLE `foos`;
SQL (7.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.9ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:20', 'foos', '2011-09-14 16:27:20', 'foos_danced', NULL, 'init')
SQL (1.2ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (31.3ms)  TRUNCATE TABLE `foos`;
SQL (7.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (5.0ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (11.2ms)  TRUNCATE TABLE `foos`;
SQL (7.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:20', 'foos', '2011-09-14 16:27:20', 'foos_danced', NULL, 'init')
SQL (3.6ms)  COMMIT
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (6.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (13.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (3.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:20', 'foos', '2011-09-14 16:27:20', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (3.3ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:20', 'foos', '2011-09-14 16:27:20', 'foos_danced', NULL, 'init')
SQL (8.9ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (7.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:20', 'foos', '2011-09-14 16:27:20', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.5ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (36.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (149.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (13.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:21', 'foos', '2011-09-14 16:27:21', 'foos_danced', NULL, 'init')
SQL (5.0ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (82.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:22', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.6ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:22', 'foos', '2011-09-14 16:27:22', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:22', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (22.3ms)  TRUNCATE TABLE `foos`;
SQL (1.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:22', 'foos', '2011-09-14 16:27:22', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (60.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (151.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:22', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
SQL (2.6ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (15.0ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:22', 'foos', '2011-09-14 16:27:22', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (64.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.3ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:23', `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.3ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:23', 'foos', '2011-09-14 16:27:23', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (60.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (148.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:24', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (19.0ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:24', 'foos', '2011-09-14 16:27:24', 'foos_danced', NULL, 'init')
SQL (3.3ms)  COMMIT
Begin init!
SQL (0.3ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (69.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (167.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:24', `phase` = 'copy' WHERE `id` = 1
SQL (1.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:24', `phase` = 'init' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (20.4ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.7ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:24', 'foos', '2011-09-14 16:27:24', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:25', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (15.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (4.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (16.3ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.4ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:24', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:24', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:24', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:25', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.7ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:25', 'foos', '2011-09-14 16:27:25', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (33.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (109.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (283.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (178.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.3ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:26', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (22.5ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:25', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:25', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:25', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:26', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (25.0ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:26', 'foos', '2011-09-14 16:27:26', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (53.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:26', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.5ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (14.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:26', NULL, 1)
SQL (1.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:26', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:26', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:26', `phase` = 'replay' WHERE `id` = 1
SQL (0.2ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:26', 'foos', '2011-09-14 16:27:26', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (50.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:27', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (11.9ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:26', NULL, 1)
SQL (1.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:27', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:27', `phase` = 'init' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (12.2ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:27', 'foos', '2011-09-14 16:27:27', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (62.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.6ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (156.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:28', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (14.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (3.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:27', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:28', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.6ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:28', 'foos', '2011-09-14 16:27:28', 'foos_danced', NULL, 'init')
SQL (4.8ms)  COMMIT
SQL (71.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.9ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (198.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:28', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.3ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:28', NULL, 1)
SQL (3.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:28', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:28', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (16.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:28', 'foos', '2011-09-14 16:27:28', 'foos_danced', NULL, 'init')
SQL (1.5ms)  COMMIT
SQL (64.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (156.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:29', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.4ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (20.5ms)  COMMIT
Begin init!
 Load (0.8ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:28', NULL, 1)
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:29', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:29', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:27:29', 'foos', '2011-09-14 16:27:29', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (61.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (118.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:30', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.0ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:27:29', NULL, 1)
SQL (24.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:30', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:27:30', `phase` = 'cutover' WHERE `id` = 1
SQL (2.8ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (6.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (9.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (20.6ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (12.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:29', 'foos', '2011-09-14 16:30:29', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (25.5ms)  TRUNCATE TABLE `foos`;
SQL (1.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (10.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (4.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (2.2ms)  TRUNCATE TABLE `foos`;
SQL (3.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (3.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:29', 'foos', '2011-09-14 16:30:29', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (6.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Create (10.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:30', 'foos', '2011-09-14 16:30:30', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:30', 'foos', '2011-09-14 16:30:30', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.1ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (11.7ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:30', 'foos', '2011-09-14 16:30:30', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (36.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (114.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (12.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:30', 'foos', '2011-09-14 16:30:30', 'foos_danced', NULL, 'init')
SQL (4.4ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.7ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (58.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:31', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (12.5ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:31', 'foos', '2011-09-14 16:30:31', 'foos_danced', NULL, 'init')
SQL (4.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:31', `phase` = 'copy' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (15.9ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:31', 'foos', '2011-09-14 16:30:31', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:31', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.9ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (15.0ms)  TRUNCATE TABLE `foos`;
SQL (25.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:31', 'foos', '2011-09-14 16:30:31', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (87.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (2.0ms)  SHOW TABLES
TableDancer::TableDance Update (11.7ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:32', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
TableDancer::TableDance Load (0.3ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (12.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:32', 'foos', '2011-09-14 16:30:32', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (68.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (135.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:33', `phase` = 'copy' WHERE `id` = 1
SQL (45.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.3ms)  UNLOCK TABLES;
SQL (0.3ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (23.3ms)  TRUNCATE TABLE `foos`;
SQL (10.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:33', 'foos', '2011-09-14 16:30:33', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (36.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:33', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:33', `phase` = 'init' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (21.8ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:33', 'foos', '2011-09-14 16:30:33', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (54.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (93.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:34', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.0ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.9ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:33', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:33', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:33', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:34', `phase` = 'replay' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.1ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:34', 'foos', '2011-09-14 16:30:34', 'foos_danced', NULL, 'init')
SQL (4.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (39.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (91.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:35', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:34', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:34', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:34', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:35', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (11.3ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:35', 'foos', '2011-09-14 16:30:35', 'foos_danced', NULL, 'init')
SQL (5.0ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (70.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (151.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:35', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.5ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.2ms)  BEGIN
 Create (0.7ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (1.0ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:35', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:35', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.3ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:35', NULL, 3)
SQL (0.7ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:36', `phase` = 'replay' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (12.2ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:36', 'foos', '2011-09-14 16:30:36', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
SQL (70.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (85.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.2ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
Begin init!
SQL (0.6ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (188.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (143.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:36', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:36', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:36', `phase` = 'replay' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:36', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.4ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:36', 'foos', '2011-09-14 16:30:36', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (40.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (91.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (160.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:37', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (22.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.0ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (2.7ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:36', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:37', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (11.9ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:37', 'foos', '2011-09-14 16:30:37', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (54.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.2ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (193.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (143.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:38', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (17.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (4.0ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:37', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:38', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:38', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (9.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:38', 'foos', '2011-09-14 16:30:38', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (92.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (100.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.0ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (211.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (133.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (209.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:39', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (17.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:38', NULL, 1)
SQL (1.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:39', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:39', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:30:39', 'foos', '2011-09-14 16:30:39', 'foos_danced', NULL, 'init')
SQL (37.8ms)  COMMIT
SQL (104.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.0ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (193.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (135.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (26.3ms)  BEGIN
SQL (1.1ms)  SHOW TABLES
TableDancer::TableDance Update (0.6ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:39', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (34.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (17.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (1.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (5.4ms)  COMMIT
Begin init!
 Load (7.4ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (3.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:30:39', NULL, 1)
SQL (3.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:39', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.6ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:30:39', `phase` = 'cutover' WHERE `id` = 1
SQL (2.0ms)  COMMIT
SQL (0.3ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (7.1ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.8ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (23.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (41.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (10.7ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.2ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:09', 'foos', '2011-09-14 16:31:09', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (14.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (2.1ms)  TRUNCATE TABLE `foos`;
SQL (7.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.7ms)  SHOW TABLES
SQL (0.0ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (8.8ms)  TRUNCATE TABLE `foos`;
SQL (3.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:09', 'foos', '2011-09-14 16:31:09', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.1ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  BEGIN
SQL (0.6ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:10', 'foos', '2011-09-14 16:31:10', 'foos_danced', NULL, 'init')
SQL (5.1ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (4.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:10', 'foos', '2011-09-14 16:31:10', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (3.7ms)  TRUNCATE TABLE `foos`;
SQL (8.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:10', 'foos', '2011-09-14 16:31:10', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (40.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (116.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (141.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (150.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (11.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:10', 'foos', '2011-09-14 16:31:10', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (73.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (135.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:11', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (19.7ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:11', 'foos', '2011-09-14 16:31:11', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:11', `phase` = 'copy' WHERE `id` = 1
SQL (3.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (23.1ms)  TRUNCATE TABLE `foos`;
SQL (7.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:11', 'foos', '2011-09-14 16:31:11', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (62.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:11', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.5ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (20.7ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:12', 'foos', '2011-09-14 16:31:12', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (141.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:12', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (16.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:12', 'foos', '2011-09-14 16:31:12', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (146.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:13', `phase` = 'copy' WHERE `id` = 1
SQL (1.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (15.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:13', 'foos', '2011-09-14 16:31:13', 'foos_danced', NULL, 'init')
SQL (4.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (72.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (141.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:13', `phase` = 'copy' WHERE `id` = 1
SQL (1.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.0ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:13', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (9.5ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:13', 'foos', '2011-09-14 16:31:13', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (148.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (92.8ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:14', `phase` = 'copy' WHERE `id` = 1
SQL (51.6ms)  COMMIT
SQL (0.3ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.3ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (15.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (4.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:13', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:13', NULL, 2)
SQL (0.2ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:13', NULL, 3)
SQL (7.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:14', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.0ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:14', 'foos', '2011-09-14 16:31:14', 'foos_danced', NULL, 'init')
SQL (2.3ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (49.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (108.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:15', `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:14', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:14', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:14', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:15', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.3ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:15', 'foos', '2011-09-14 16:31:15', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (47.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:16', `phase` = 'copy' WHERE `id` = 1
SQL (1.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.2ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:15', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:15', NULL, 2)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.4ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:15', NULL, 3)
SQL (1.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:16', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.1ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:16', 'foos', '2011-09-14 16:31:16', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (44.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (74.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (168.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:16', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:16', NULL, 1)
SQL (1.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:16', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:16', `phase` = 'init' WHERE `id` = 1
SQL (14.1ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (6.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:16', 'foos', '2011-09-14 16:31:16', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (44.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (182.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:17', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.0ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.7ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.0ms)  BEGIN
 Destroy (0.4ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:16', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:17', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (20.4ms)  TRUNCATE TABLE `foos`;
SQL (1.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:17', 'foos', '2011-09-14 16:31:17', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
SQL (50.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (163.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (135.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (158.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:18', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (3.0ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.2ms)  BEGIN
 Destroy (1.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.8ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:17', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:18', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:18', `phase` = 'cutover' WHERE `id` = 1
SQL (0.7ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (2.5ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (11.7ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:18', 'foos', '2011-09-14 16:31:18', 'foos_danced', NULL, 'init')
SQL (2.3ms)  COMMIT
SQL (83.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:18', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (16.5ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (2.8ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:18', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:18', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:18', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (11.5ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:31:18', 'foos', '2011-09-14 16:31:18', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (49.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.7ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (164.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:19', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (19.5ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (2.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:31:18', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:19', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:31:19', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (11.2ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.3ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (14.4ms)  TRUNCATE TABLE `foos`;
SQL (7.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.4ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:33:47', 'foos', '2011-09-14 16:33:47', 'foos_danced', NULL, 'init')
SQL (16.6ms)  COMMIT
SQL (43.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (107.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (147.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:33:48', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (1.0ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:33:47', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:33:48', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:33:48', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (12.8ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.2ms)  TRUNCATE TABLE `foos`;
SQL (8.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (9.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (27.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.1ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:34:10', 'foos', '2011-09-14 16:34:10', 'foos_danced', NULL, 'init')
SQL (1.6ms)  COMMIT
SQL (66.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (246.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (217.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:34:11', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:34:10', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:34:11', `phase` = 'replay' WHERE `id` = 1
SQL (22.7ms)  COMMIT
SQL (0.4ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:34:11', `phase` = 'cutover' WHERE `id` = 1
SQL (3.7ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (12.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (13.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.3ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (5.8ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (17.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (4.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.5ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:36:04', 'foos', '2011-09-14 16:36:04', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (62.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (165.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.0ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (157.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:36:05', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.7ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.8ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:36:04', NULL, 1)
SQL (13.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:36:05', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.9ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (24.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.4ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.3ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (2.2ms)  TRUNCATE TABLE `foos`;
SQL (22.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:37:02', 'foos', '2011-09-14 16:37:02', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (47.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.2ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (164.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.3ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:03', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:37:02', NULL, 1)
SQL (18.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:03', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (2.7ms)  TRUNCATE TABLE `foos`;
SQL (15.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (30.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (1.1ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (9.7ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (9.7ms)  TRUNCATE TABLE `foos`;
SQL (1.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:37:20', 'foos', '2011-09-14 16:37:20', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (43.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (124.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:21', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (26.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (3.1ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.7ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:37:20', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:21', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (16.1ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (1.0ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (26.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (2.4ms)  TRUNCATE TABLE `foos`;
SQL (22.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:37:40', 'foos', '2011-09-14 16:37:40', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (41.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (132.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.5ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (175.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:41', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:37:40', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:41', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (19.4ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (0.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (21.2ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.4ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (13.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:37:53', 'foos', '2011-09-14 16:37:53', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (40.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (134.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.0ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (14.1ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (135.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:54', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (2.1ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:37:53', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:54', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.4ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDanceReplay Update (0.5ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.3ms)  COMMIT
 Columns (13.6ms)  SHOW FIELDS FROM `foos`
 Load (0.4ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (2.1ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (5.3ms)  COMMIT
 Delete all (0.2ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.2ms)  BEGIN
TableDancer::TableDanceReplay Update (0.4ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:37:54', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (14.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (2.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.4ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (10.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.4ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:08', 'foos', '2011-09-14 16:38:08', 'foos_danced', NULL, 'init')
SQL (0.7ms)  COMMIT
SQL (50.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (108.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (127.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:08', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:08', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:08', `phase` = 'replay' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (1.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.4ms)  COMMIT
 Columns (10.1ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (3.1ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.3ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (1.3ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (1.7ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (1.7ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:08', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (9.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (1.8ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (1.4ms)  TRUNCATE TABLE `foos`;
SQL (2.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.7ms)  SELECT DATABASE() as db
SQL (1.5ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (23.4ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:17', 'foos', '2011-09-14 16:38:17', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (48.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (117.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.9ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.6ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:17', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
TableDancer::TableDanceReplay Columns (1.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:17', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:17', `phase` = 'replay' WHERE `id` = 1
SQL (26.0ms)  COMMIT
SQL (0.4ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (37.0ms)  SHOW FIELDS FROM `foos`
 Load (0.3ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.3ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.6ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.3ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.4ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.9ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:17', `phase` = 'cutover' WHERE `id` = 1
SQL (11.0ms)  COMMIT
TableDancer::TableDance Load (0.3ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (13.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:28', 'foos', '2011-09-14 16:38:28', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (17.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (17.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.8ms)  TRUNCATE TABLE `foos`;
SQL (11.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (5.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (5.1ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:28', 'foos', '2011-09-14 16:38:28', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.5ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (5.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:28', 'foos', '2011-09-14 16:38:28', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (3.8ms)  TRUNCATE TABLE `foos`;
SQL (3.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:28', 'foos', '2011-09-14 16:38:28', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (7.6ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:28', 'foos', '2011-09-14 16:38:28', 'foos_danced', NULL, 'init')
SQL (7.7ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (34.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (133.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (234.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (184.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.8ms)  SHOW TABLES
SQL (1.3ms)  TRUNCATE TABLE `foos`;
SQL (16.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:29', 'foos', '2011-09-14 16:38:29', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (86.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:29', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (15.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:29', 'foos', '2011-09-14 16:38:29', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.3ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:29', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (20.8ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (10.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:29', 'foos', '2011-09-14 16:38:29', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (171.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (154.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:30', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.5ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (11.9ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:30', 'foos', '2011-09-14 16:38:30', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (60.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:31', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.4ms)  TRUNCATE TABLE `foos`;
SQL (14.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:31', 'foos', '2011-09-14 16:38:31', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (82.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:31', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (18.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:31', 'foos', '2011-09-14 16:38:31', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (167.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (150.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:32', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (21.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:32', `phase` = 'init' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (4.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:32', 'foos', '2011-09-14 16:38:32', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (63.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (85.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:33', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (25.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (4.1ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.0ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.5ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:32', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:32', NULL, 2)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:32', NULL, 3)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:33', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (9.2ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:33', 'foos', '2011-09-14 16:38:33', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (53.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (127.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:33', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:33', NULL, 1)
SQL (11.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:33', NULL, 2)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:33', NULL, 3)
SQL (4.3ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:33', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (9.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:33', 'foos', '2011-09-14 16:38:33', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (53.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (159.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:34', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (12.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.6ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:33', NULL, 1)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:33', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:33', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:34', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.2ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:34', 'foos', '2011-09-14 16:38:34', 'foos_danced', NULL, 'init')
SQL (3.6ms)  COMMIT
SQL (70.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.8ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (173.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:35', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (10.5ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (3.2ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:34', NULL, 1)
SQL (6.9ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:35', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:35', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.5ms)  TRUNCATE TABLE `foos`;
SQL (24.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:35', 'foos', '2011-09-14 16:38:35', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (52.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (164.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (138.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:35', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.5ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:35', NULL, 1)
SQL (0.7ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:35', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.2ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:36', 'foos', '2011-09-14 16:38:36', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
SQL (60.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (188.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (125.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (133.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:36', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:36', NULL, 1)
SQL (14.0ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:36', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (2.5ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.8ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (19.8ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.3ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:36', `phase` = 'cutover' WHERE `id` = 1
SQL (10.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.1ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:36', 'foos', '2011-09-14 16:38:36', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
SQL (40.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (143.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:37', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.5ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (16.6ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:36', NULL, 1)
SQL (0.7ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:37', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (2.4ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (13.9ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.3ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (9.3ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:37', `phase` = 'cutover' WHERE `id` = 1
SQL (10.4ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (7.0ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:38:37', 'foos', '2011-09-14 16:38:37', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (33.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (148.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:38', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (3.3ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:38:37', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:38', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.9ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.3ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (2.0ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (10.8ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:38:38', `phase` = 'cutover' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (4.7ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.7ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (9.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (0.9ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (4.5ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.6ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:19', 'foos', '2011-09-14 16:50:19', 'foos_danced', NULL, 'init')
SQL (15.7ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (4.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (9.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (3.8ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (0.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (0.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:19', 'foos', '2011-09-14 16:50:19', 'foos_danced', NULL, 'init')
SQL (1.8ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (4.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (1.3ms)  SHOW TABLES
TableDancer::TableDance Create (8.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:19', 'foos', '2011-09-14 16:50:19', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (0.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:19', 'foos', '2011-09-14 16:50:19', 'foos_danced', NULL, 'init')
SQL (2.7ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (0.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:19', 'foos', '2011-09-14 16:50:19', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (57.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (140.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (141.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (1.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:19', 'foos', '2011-09-14 16:50:19', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
 Columns (1.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.3ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (55.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:20', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (24.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:20', 'foos', '2011-09-14 16:50:20', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:20', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (22.0ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:20', 'foos', '2011-09-14 16:50:20', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (60.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:21', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.4ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (17.0ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:21', 'foos', '2011-09-14 16:50:21', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (77.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:21', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (12.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:21', 'foos', '2011-09-14 16:50:21', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (70.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:22', `phase` = 'copy' WHERE `id` = 1
SQL (1.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (9.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:22', 'foos', '2011-09-14 16:50:22', 'foos_danced', NULL, 'init')
SQL (3.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (72.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (151.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:23', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (25.1ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (4.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:23', `phase` = 'init' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (11.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:23', 'foos', '2011-09-14 16:50:23', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (49.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (74.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (118.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:23', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (16.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
TableDancer::TableDanceReplay Columns (17.2ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:23', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:23', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:23', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:23', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (9.2ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:23', 'foos', '2011-09-14 16:50:23', 'foos_danced', NULL, 'init')
SQL (2.9ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (32.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:24', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:23', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:23', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:23', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:24', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.8ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (11.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:24', 'foos', '2011-09-14 16:50:24', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (51.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (142.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:24', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:24', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:24', NULL, 2)
SQL (11.8ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:24', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:24', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (3.6ms)  TRUNCATE TABLE `foos`;
SQL (23.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:24', 'foos', '2011-09-14 16:50:24', 'foos_danced', NULL, 'init')
SQL (3.7ms)  COMMIT
SQL (63.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.9ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:25', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:24', NULL, 1)
SQL (0.9ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:25', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:25', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (11.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:25', 'foos', '2011-09-14 16:50:25', 'foos_danced', NULL, 'init')
SQL (5.0ms)  COMMIT
SQL (54.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:26', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:25', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:26', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (17.0ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:26', 'foos', '2011-09-14 16:50:26', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (39.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.2ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (184.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:26', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (18.1ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:26', NULL, 1)
SQL (1.8ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:26', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:26', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (16.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:26', 'foos', '2011-09-14 16:50:26', 'foos_danced', NULL, 'init')
SQL (4.8ms)  COMMIT
SQL (75.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (122.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (178.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:27', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.8ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:26', NULL, 1)
SQL (20.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:27', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:27', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.5ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (23.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:27', 'foos', '2011-09-14 16:50:27', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (51.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.1ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (175.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (151.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:28', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.1ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.6ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.0ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (22.1ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:50:27', NULL, 1)
SQL (1.8ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:28', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:28', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (18.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:28', 'foos', '2011-09-14 16:50:28', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (60.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (181.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (269.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.4ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (19.7ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:29', `phase` = 'copy' WHERE `id` = 1
SQL (5.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:29', `phase` = 'replay' WHERE `id` = 1
SQL (0.9ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.5ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.7ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:29', `phase` = 'cutover' WHERE `id` = 1
SQL (32.5ms)  COMMIT
SQL (0.3ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:29', `phase` = 'init' WHERE `id` = 1
SQL (6.5ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.5ms)  TRUNCATE TABLE `foos`;
SQL (8.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.8ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:29', 'foos', '2011-09-14 16:50:29', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (188.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (108.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (209.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:30', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:30', `phase` = 'replay' WHERE `id` = 1
SQL (8.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:30', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.0ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (23.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:30', 'foos', '2011-09-14 16:50:30', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (130.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:30', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:30', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:30', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (16.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:30', 'foos', '2011-09-14 16:50:30', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (69.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (66.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:31', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:31', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:31', `phase` = 'cutover' WHERE `id` = 1
SQL (24.9ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.0ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (3.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:50:31', 'foos', '2011-09-14 16:50:31', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (50.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (201.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (328.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:32', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:32', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:50:32', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.0ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (16.5ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.6ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (10.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (10.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:06', 'foos', '2011-09-14 16:52:06', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (17.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (13.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (3.5ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:06', 'foos', '2011-09-14 16:52:06', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (3.4ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:06', 'foos', '2011-09-14 16:52:06', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.4ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:06', 'foos', '2011-09-14 16:52:06', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (5.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:06', 'foos', '2011-09-14 16:52:06', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
Begin init!
 Load (0.4ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (35.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (117.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (146.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.7ms)  TRUNCATE TABLE `foos`;
SQL (14.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:07', 'foos', '2011-09-14 16:52:07', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.9ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (157.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:08', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (16.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:08', 'foos', '2011-09-14 16:52:08', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:08', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (22.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:08', 'foos', '2011-09-14 16:52:08', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (69.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (167.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:08', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.3ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.0ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.0ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:08', 'foos', '2011-09-14 16:52:08', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (75.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:09', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.1ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:09', 'foos', '2011-09-14 16:52:09', 'foos_danced', NULL, 'init')
SQL (3.4ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (68.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (175.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:10', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (16.5ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:10', 'foos', '2011-09-14 16:52:10', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (69.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:10', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (3.9ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:10', `phase` = 'init' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (12.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:10', 'foos', '2011-09-14 16:52:10', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
Begin init!
SQL (0.4ms)  SET autocommit=0;
SQL (0.6ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (71.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (135.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:11', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (15.2ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.4ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:10', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:10', NULL, 2)
SQL (8.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:10', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:11', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.4ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:11', 'foos', '2011-09-14 16:52:11', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (31.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (183.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.6ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:12', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:11', NULL, 1)
SQL (19.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:11', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:11', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:12', `phase` = 'replay' WHERE `id` = 1
SQL (4.0ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:12', 'foos', '2011-09-14 16:52:12', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (53.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:12', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (5.7ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:12', NULL, 1)
SQL (7.9ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:12', NULL, 2)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:12', NULL, 3)
SQL (3.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.5ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:12', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (4.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:12', 'foos', '2011-09-14 16:52:12', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
SQL (74.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.8ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (173.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (135.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:13', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:12', NULL, 1)
SQL (24.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:13', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:13', `phase` = 'init' WHERE `id` = 1
SQL (4.5ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (5.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:13', 'foos', '2011-09-14 16:52:13', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (34.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (180.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:14', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.3ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (22.1ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:13', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:14', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (26.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:14', 'foos', '2011-09-14 16:52:14', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (40.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (164.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (167.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:14', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.2ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.8ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.1ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:14', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:14', `phase` = 'replay' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.3ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (16.5ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (8.6ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.9ms)  COMMIT
 Delete all (0.2ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:14', `phase` = 'cutover' WHERE `id` = 1
SQL (10.9ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.3ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:15', 'foos', '2011-09-14 16:52:15', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
SQL (41.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.1ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (173.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:15', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.1ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (17.1ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:15', NULL, 1)
SQL (1.8ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:15', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.4ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (2.2ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (5.2ms)  COMMIT
 Delete all (0.2ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.2ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (4.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:15', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.7ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:15', 'foos', '2011-09-14 16:52:15', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (51.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.5ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.0ms)  SHOW FIELDS FROM `foos`
SQL (0.2ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:16', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (19.8ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (3.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:15', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:16', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.9ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.3ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (15.0ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.5ms)  COMMIT
 Delete all (0.2ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (12.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:16', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (5.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:16', 'foos', '2011-09-14 16:52:16', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (28.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (90.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (160.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (324.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (260.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:17', `phase` = 'copy' WHERE `id` = 1
SQL (2.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:17', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:17', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:17', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.2ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:17', 'foos', '2011-09-14 16:52:17', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (56.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:18', `phase` = 'copy' WHERE `id` = 1
SQL (1.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:18', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:18', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.4ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:18', 'foos', '2011-09-14 16:52:18', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (66.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:18', `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:18', `phase` = 'replay' WHERE `id` = 1
SQL (8.8ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:18', `phase` = 'cutover' WHERE `id` = 1
SQL (0.5ms)  COMMIT
TableDancer::TableDanceReplay Load (0.5ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.4ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (13.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:18', 'foos', '2011-09-14 16:52:18', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (30.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (141.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (118.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.6ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:19', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:19', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:19', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.4ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:19', 'foos', '2011-09-14 16:52:19', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (66.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (151.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:19', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:19', `phase` = 'replay' WHERE `id` = 1
SQL (11.1ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:19', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.0ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (6.2ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.0ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (11.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:34', 'foos', '2011-09-14 16:52:34', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (25.4ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.6ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
SQL (0.0ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.7ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:34', 'foos', '2011-09-14 16:52:34', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.0ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (7.4ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.8ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.5ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:34', 'foos', '2011-09-14 16:52:34', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.2ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:34', 'foos', '2011-09-14 16:52:34', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (3.7ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:34', 'foos', '2011-09-14 16:52:34', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (37.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (151.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.5ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (13.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:35', 'foos', '2011-09-14 16:52:35', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (4.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (91.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (151.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (150.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:35', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (15.1ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:35', 'foos', '2011-09-14 16:52:35', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:35', `phase` = 'copy' WHERE `id` = 1
SQL (7.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (13.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:35', 'foos', '2011-09-14 16:52:35', 'foos_danced', NULL, 'init')
SQL (4.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (76.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:36', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (3.1ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (12.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:36', 'foos', '2011-09-14 16:52:36', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (64.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (141.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:37', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (10.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:37', 'foos', '2011-09-14 16:52:37', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (135.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:37', `phase` = 'copy' WHERE `id` = 1
SQL (1.3ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (14.6ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:37', 'foos', '2011-09-14 16:52:37', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (71.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (66.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:38', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.3ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (2.1ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (10.9ms)  COMMIT
SQL (0.0ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:38', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.3ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:38', 'foos', '2011-09-14 16:52:38', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (66.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:38', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (9.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:38', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:38', NULL, 2)
SQL (6.9ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:38', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:39', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (3.5ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:39', 'foos', '2011-09-14 16:52:39', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (41.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (132.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (118.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:39', `phase` = 'copy' WHERE `id` = 1
SQL (2.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:39', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:39', NULL, 2)
SQL (1.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:39', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:39', `phase` = 'replay' WHERE `id` = 1
SQL (18.4ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.3ms)  TRUNCATE TABLE `foos`;
SQL (4.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:39', 'foos', '2011-09-14 16:52:39', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (40.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (141.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.9ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:40', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.1ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:39', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:39', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:39', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:40', `phase` = 'replay' WHERE `id` = 1
SQL (21.6ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (6.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (16.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:40', 'foos', '2011-09-14 16:52:40', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (47.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.0ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (182.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:40', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.0ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.0ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:40', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:40', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:40', `phase` = 'init' WHERE `id` = 1
SQL (13.6ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (6.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:40', 'foos', '2011-09-14 16:52:40', 'foos_danced', NULL, 'init')
SQL (4.8ms)  COMMIT
SQL (48.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (156.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:41', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.8ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:40', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:41', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (22.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:41', 'foos', '2011-09-14 16:52:41', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (50.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.3ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (156.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:42', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (18.8ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (3.2ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:41', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:42', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.6ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.8ms)  COMMIT
 Columns (6.5ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (4.0ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (5.2ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:42', `phase` = 'cutover' WHERE `id` = 1
SQL (4.4ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.5ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (20.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:42', 'foos', '2011-09-14 16:52:42', 'foos_danced', NULL, 'init')
SQL (1.2ms)  COMMIT
SQL (37.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.3ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (163.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:42', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:42', NULL, 1)
SQL (22.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:42', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (2.5ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.3ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.3ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (9.3ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (2.2ms)  COMMIT
 Delete all (0.2ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.2ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:42', `phase` = 'cutover' WHERE `id` = 1
SQL (4.0ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (22.5ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:43', 'foos', '2011-09-14 16:52:43', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (38.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.9ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.7ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:43', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.3ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.2ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (14.8ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:52:43', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:43', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.3ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.5ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (1.2ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.6ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:43', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (20.9ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:43', 'foos', '2011-09-14 16:52:43', 'foos_danced', NULL, 'init')
SQL (4.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (35.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:44', `phase` = 'copy' WHERE `id` = 1
SQL (12.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:44', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:44', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:44', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (18.5ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (16.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:44', 'foos', '2011-09-14 16:52:44', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (57.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (314.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (304.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (125.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:45', `phase` = 'copy' WHERE `id` = 1
SQL (1.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:45', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:45', `phase` = 'cutover' WHERE `id` = 1
SQL (0.9ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (297.2ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.8ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:52:45', `phase` = 'complete' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (16.2ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:45', 'foos', '2011-09-14 16:52:45', 'foos_danced', NULL, 'init')
SQL (3.6ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.0ms)  Mysql::Error: Table 'table_dancer_test.foos_danced' doesn't exist: LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.9ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:45', 'foos', '2011-09-14 16:52:45', 'foos_danced', NULL, 'init')
SQL (4.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.0ms)  Mysql::Error: Table 'table_dancer_test.foos_danced' doesn't exist: LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
SQL (0.0ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (6.7ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.6ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:52:45', 'foos', '2011-09-14 16:52:45', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.0ms)  Mysql::Error: Table 'table_dancer_test.foos_danced' doesn't exist: LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (12.2ms)  TRUNCATE TABLE `foos`;
SQL (1.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (6.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.9ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (20.4ms)  SHOW TABLES
SQL (0.4ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (32.7ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (27.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (23.3ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (2.5ms)  SHOW FIELDS FROM `table_dances`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:53', 'foos', '2011-09-14 16:54:53', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (22.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (9.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (22.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.8ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.6ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.2ms)  BEGIN
SQL (0.6ms)  SHOW TABLES
SQL (7.5ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (19.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:53', 'foos', '2011-09-14 16:54:53', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.7ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (14.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:53', 'foos', '2011-09-14 16:54:53', 'foos_danced', NULL, 'init')
SQL (4.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (7.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.8ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.6ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:53', 'foos', '2011-09-14 16:54:53', 'foos_danced', NULL, 'init')
SQL (0.7ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.7ms)  TRUNCATE TABLE `foos`;
SQL (11.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:54', 'foos', '2011-09-14 16:54:54', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (32.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (1.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.3ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:54', 'foos', '2011-09-14 16:54:54', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (72.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:55', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (16.4ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:55', 'foos', '2011-09-14 16:54:55', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.3ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:55', `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (19.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.4ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.0ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:55', 'foos', '2011-09-14 16:54:55', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (55.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (136.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:55', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.6ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.5ms)  TRUNCATE TABLE `foos`;
SQL (12.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:55', 'foos', '2011-09-14 16:54:55', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (72.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (82.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (143.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:56', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.9ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:56', 'foos', '2011-09-14 16:54:56', 'foos_danced', NULL, 'init')
SQL (4.5ms)  COMMIT
Begin init!
SQL (0.2ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (67.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (87.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (163.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (135.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:57', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (17.2ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:57', 'foos', '2011-09-14 16:54:57', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:57', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (2.5ms)  SHOW FIELDS FROM `foos`
SQL (0.3ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.9ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:57', `phase` = 'init' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (23.9ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.7ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:57', 'foos', '2011-09-14 16:54:57', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (59.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (95.0ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (154.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (118.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:58', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.5ms)  SHOW FIELDS FROM `foos`
SQL (0.2ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (15.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Columns (2.6ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.3ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:57', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:57', NULL, 2)
SQL (1.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:57', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:58', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (16.4ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (15.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:58', 'foos', '2011-09-14 16:54:58', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (38.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (167.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:59', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:58', NULL, 1)
SQL (18.7ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:58', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:58', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.2ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:59', `phase` = 'replay' WHERE `id` = 1
SQL (3.5ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (7.2ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.7ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:59', 'foos', '2011-09-14 16:54:59', 'foos_danced', NULL, 'init')
SQL (4.7ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (49.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (133.3ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (150.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:59', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:59', NULL, 1)
SQL (1.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:59', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:59', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:54:59', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (14.2ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.8ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:54:59', 'foos', '2011-09-14 16:54:59', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
SQL (74.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (118.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:00', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.6ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.0ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (15.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:54:59', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:00', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:00', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (17.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:00', 'foos', '2011-09-14 16:55:00', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (52.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.4ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (181.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:01', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.7ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.5ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:55:00', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:01', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (24.2ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:01', 'foos', '2011-09-14 16:55:01', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (35.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.9ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.1ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:01', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.3ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (20.7ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (2.5ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:55:01', NULL, 1)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:01', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (12.8ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (12.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (1.0ms)  COMMIT
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.2ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.9ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:01', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.1ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.4ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.4ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:01', 'foos', '2011-09-14 16:55:01', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (45.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.1ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (182.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:02', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (18.5ms)  COMMIT
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:55:01', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:02', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.2ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.3ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (12.1ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.0ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (1.5ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:02', `phase` = 'cutover' WHERE `id` = 1
SQL (3.8ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (14.3ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (0.9ms)  TRUNCATE TABLE `table_dances`;
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.4ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:02', 'foos', '2011-09-14 16:55:02', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
SQL (55.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.2ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (232.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (150.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (126.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:03', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.3ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 16:55:02', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:03', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.2ms)  SHOW FIELDS FROM `foos_danced`
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`) VALUES('changed!')
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.7ms)  COMMIT
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (23.1ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
WARNING: Can't mass-assign these protected attributes: id
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Delete all (0.2ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (13.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:03', `phase` = 'cutover' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.5ms)  SHOW TABLES
SQL (4.7ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (15.3ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.6ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (4.5ms)  DROP TABLE `foos_decommissioned`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:03', 'foos', '2011-09-14 16:55:03', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (215.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (354.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (165.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:04', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:04', `phase` = 'replay' WHERE `id` = 1
SQL (22.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:04', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:04', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.7ms)  TRUNCATE TABLE `foos`;
SQL (23.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:04', 'foos', '2011-09-14 16:55:04', 'foos_danced', NULL, 'init')
SQL (4.2ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (51.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (67.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.3ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:04', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:05', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:05', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (315.2ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.9ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:05', `phase` = 'complete' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.1ms)  TRUNCATE TABLE `foos`;
SQL (10.7ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (80.7ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.3ms)  SHOW TABLES
SQL (15.8ms)  DROP TABLE `foos_decommissioned`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:05', 'foos', '2011-09-14 16:55:05', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (134.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (126.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:05', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:05', `phase` = 'replay' WHERE `id` = 1
SQL (7.2ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:05', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (302.1ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.2ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:06', `phase` = 'complete' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.4ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (18.6ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (89.7ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  DROP TABLE `foos_decommissioned`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:06', 'foos', '2011-09-14 16:55:06', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (140.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:06', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.3ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:06', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:06', `phase` = 'cutover' WHERE `id` = 1
SQL (1.0ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.2ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (306.8ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.3ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:07', `phase` = 'complete' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (12.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (104.9ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  DROP TABLE `foos_decommissioned`
SQL (0.0ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 16:55:07', 'foos', '2011-09-14 16:55:07', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
Begin init!
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (140.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:07', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
Begin init!
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:07', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:07', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.2ms)  BEGIN
SQL (296.6ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (2.1ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.2ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 16:55:08', `phase` = 'complete' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (22.7ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (6.5ms)  TRUNCATE TABLE `foos`;
SQL (0.7ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SET SQL_AUTO_IS_NULL=0
SQL (56.9ms)  SHOW TABLES
SQL (0.4ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (79.7ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (0.1ms)  SELECT DATABASE() as db
SQL (1.1ms)  select table_name from information_schema.views where table_schema = 'table_dancer_test'
SQL (31.2ms)  TRUNCATE TABLE `foos`;
SQL (1.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (6.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
TableDancer::TableDance Columns (1.7ms)  SHOW FIELDS FROM `table_dances`
SQL (0.1ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.1ms)  BEGIN
SQL (0.9ms)  SHOW TABLES
TableDancer::TableDance Create (0.3ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:42', 'foos', '2011-09-14 17:38:42', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.3ms)  SELECT count(*) AS count_all FROM `table_dances` 
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.6ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (16.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.8ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.6ms)  TRUNCATE TABLE `foos`;
SQL (5.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.3ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
SQL (0.1ms)  ROLLBACK
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (7.4ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (10.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (9.6ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:42', 'foos', '2011-09-14 17:38:42', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (23.0ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.3ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.9ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.0ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:42', 'foos', '2011-09-14 17:38:42', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (4.4ms)  TRUNCATE TABLE `foos`;
SQL (15.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.8ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:42', 'foos', '2011-09-14 17:38:42', 'foos_danced', NULL, 'init')
SQL (3.7ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.7ms)  TRUNCATE TABLE `foos`;
SQL (6.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.8ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:42', 'foos', '2011-09-14 17:38:42', 'foos_danced', NULL, 'init')
SQL (1.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (161.6ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.8ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (183.2ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.6ms)  TRUNCATE TABLE `foos`;
SQL (20.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.1ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:43', 'foos', '2011-09-14 17:38:43', 'foos_danced', NULL, 'init')
SQL (3.6ms)  COMMIT
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (68.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:43', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (12.4ms)  TRUNCATE TABLE `foos`;
SQL (8.2ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.1ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:43', 'foos', '2011-09-14 17:38:43', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:43', `phase` = 'copy' WHERE `id` = 1
SQL (0.5ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (20.5ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (6.1ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (7.7ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:43', 'foos', '2011-09-14 17:38:43', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.4ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (73.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (76.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.4ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (150.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:44', `phase` = 'copy' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (2.3ms)  SHOW TRIGGERS;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (13.7ms)  TRUNCATE TABLE `foos`;
SQL (1.0ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:44', 'foos', '2011-09-14 17:38:44', 'foos_danced', NULL, 'init')
SQL (4.1ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (65.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.8ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (139.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.2ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:45', `phase` = 'copy' WHERE `id` = 1
SQL (1.0ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.2ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (12.5ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:45', 'foos', '2011-09-14 17:38:45', 'foos_danced', NULL, 'init')
SQL (4.7ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (80.9ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.3ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:45', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.2ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.2ms)  TRUNCATE TABLE `foos`;
SQL (12.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (1.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:45', 'foos', '2011-09-14 17:38:45', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (76.8ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (79.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (159.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (140.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (151.0ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:46', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.0ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:46', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (19.4ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.1ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:46', 'foos', '2011-09-14 17:38:46', 'foos_danced', NULL, 'init')
SQL (4.7ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (75.3ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (172.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (119.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (146.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:46', `phase` = 'copy' WHERE `id` = 1
SQL (1.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.3ms)  SET autocommit=1;
 Columns (1.3ms)  SHOW FIELDS FROM `foos`
SQL (0.3ms)  BEGIN
 Create (25.0ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (12.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.4ms)  COMMIT
TableDancer::TableDanceReplay Columns (1.8ms)  SHOW FIELDS FROM `table_dance_replays`
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:46', NULL, 1)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:46', NULL, 2)
SQL (10.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:46', NULL, 3)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:47', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`instruction` = 1) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.2ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (10.5ms)  TRUNCATE TABLE `foos`;
SQL (8.3ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.6ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.7ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.3ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:47', 'foos', '2011-09-14 17:38:47', 'foos_danced', NULL, 'init')
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (52.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (92.5ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.2ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (166.9ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (194.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:47', `phase` = 'copy' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:47', NULL, 1)
SQL (0.6ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:47', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:47', NULL, 3)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:47', `phase` = 'replay' WHERE `id` = 1
SQL (18.8ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.3ms)  TRUNCATE TABLE `foos`;
SQL (4.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.1ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:47', 'foos', '2011-09-14 17:38:47', 'foos_danced', NULL, 'init')
SQL (4.0ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (61.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (95.4ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (162.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:48', `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.6ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:47', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:47', NULL, 2)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Create (0.1ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:47', NULL, 3)
SQL (20.4ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:48', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (5.0ms)  TRUNCATE TABLE `foos`;
SQL (8.1ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.9ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:48', 'foos', '2011-09-14 17:38:48', 'foos_danced', NULL, 'init')
SQL (0.6ms)  COMMIT
SQL (58.5ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (84.3ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.9ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (148.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (129.1ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (156.6ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:49', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.0ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.0ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (24.8ms)  COMMIT
 Load (0.4ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:48', NULL, 1)
SQL (0.9ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:49', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:49', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (12.0ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.0ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:49', 'foos', '2011-09-14 17:38:49', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (61.0ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (74.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.6ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (2.3ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (2.3ms)  COMMIT
SQL (0.2ms)  BEGIN
 Create (0.3ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (1.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (170.6ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (135.3ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.4ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:49', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.5ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.3ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.4ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:49', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:49', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE (`table_dance_replays`.table_dance_id = 1) ORDER BY instruction ASC, event_time ASC
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (10.6ms)  TRUNCATE TABLE `foos`;
SQL (0.6ms)  TRUNCATE TABLE `foos_danced`;
SQL (7.5ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (1.6ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:49', 'foos', '2011-09-14 17:38:49', 'foos_danced', NULL, 'init')
SQL (11.3ms)  COMMIT
SQL (77.7ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (88.2ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (165.1ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:50', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (25.9ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.0ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (1.0ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:49', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.5ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:50', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (1.1ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
Begin replay!
TableDancer::TableDanceReplay Load (1.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
 Load (0.3ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.3ms)  SHOW FIELDS FROM `foos_danced`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`, `id`) VALUES('changed!', 1)
SQL (11.2ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.3ms)  COMMIT
 Columns (6.6ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (4.5ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
SQL (0.0ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (6.7ms)  COMMIT
 Delete all (0.2ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (3.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:50', `phase` = 'cutover' WHERE `id` = 1
SQL (0.4ms)  COMMIT
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.2ms)  SELECT count(*) AS count_all FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.8ms)  TRUNCATE TABLE `foos`;
SQL (0.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (22.8ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:50', 'foos', '2011-09-14 17:38:50', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (45.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.6ms)  SHOW FIELDS FROM `foos`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.8ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (216.0ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (117.6ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:51', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.1ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.0ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.6ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (1.0ms)  COMMIT
 Load (0.3ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.3ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.4ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:50', NULL, 1)
SQL (17.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:51', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.1ms)  SHOW FIELDS FROM `foos_danced`
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos_danced` (`title`, `id`) VALUES('changed!', 1)
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.8ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (24.1ms)  COMMIT
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (16.7ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (0.4ms)  COMMIT
 Delete all (0.4ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (1.4ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (9.5ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:51', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDance Load (0.3ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (4.8ms)  TRUNCATE TABLE `foos`;
SQL (8.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.7ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:51', 'foos', '2011-09-14 17:38:51', 'foos_danced', NULL, 'init')
SQL (3.8ms)  COMMIT
SQL (43.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (100.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (1.0ms)  DROP TRIGGER IF EXISTS foos_after_delete;
 Columns (1.7ms)  SHOW FIELDS FROM `foos`
SQL (0.8ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.5ms)  COMMIT
SQL (0.1ms)  BEGIN
 Create (0.1ms)  INSERT INTO `foos` (`title`) VALUES(NULL)
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (158.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (189.5ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (374.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:52', `last_copy_id` = 2, `phase` = 'copy' WHERE `id` = 1
SQL (1.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` LIMIT 1
SQL (0.1ms)  BEGIN
 Update (0.3ms)  UPDATE `foos` SET `title` = 'changed!' WHERE `id` = 1
SQL (0.6ms)  COMMIT
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY foos.id DESC LIMIT 1
SQL (0.1ms)  BEGIN
 Destroy (0.2ms)  DELETE FROM `foos` WHERE `id` = 2
SQL (0.3ms)  COMMIT
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Create (0.2ms)  INSERT INTO `table_dance_replays` (`table_dance_id`, `performed`, `instruction`, `source_table`, `event_time`, `dest_table`, `source_id`) VALUES(1, 0, 1, NULL, '2011-09-14 17:38:51', NULL, 1)
SQL (0.3ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:52', `phase` = 'replay' WHERE `id` = 1
SQL (0.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
 Columns (1.4ms)  SHOW FIELDS FROM `foos`
 Load (0.2ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.9ms)  SHOW FIELDS FROM `foos_danced`
SQL (0.1ms)  BEGIN
 Create (0.2ms)  INSERT INTO `foos_danced` (`title`, `id`) VALUES('changed!', 1)
SQL (0.4ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 3
SQL (0.4ms)  COMMIT
 Columns (1.2ms)  SHOW FIELDS FROM `foos`
 Load (0.1ms)  SELECT * FROM `foos` WHERE (`foos`.`id` = 1) 
 Columns (1.6ms)  SHOW FIELDS FROM `foos_danced`
 Load (0.2ms)  SELECT * FROM `foos_danced` WHERE (`foos_danced`.`id` = 1) 
SQL (0.1ms)  BEGIN
SQL (0.1ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 1
SQL (11.8ms)  COMMIT
 Delete all (0.1ms)  DELETE FROM `foos_danced` WHERE (`id` IN (2)) 
SQL (0.1ms)  BEGIN
TableDancer::TableDanceReplay Update (0.2ms)  UPDATE `table_dance_replays` SET `performed` = 1 WHERE `id` = 2
SQL (0.5ms)  COMMIT
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:52', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (9.4ms)  TRUNCATE TABLE `foos_danced`;
SQL (0.6ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.5ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.8ms)  DROP TABLE `foos_decommissioned`
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:52', 'foos', '2011-09-14 17:38:52', 'foos_danced', NULL, 'init')
SQL (3.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.1ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (86.4ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (83.6ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.7ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (149.8ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.2ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:53', `phase` = 'copy' WHERE `id` = 1
SQL (0.4ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:53', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:53', `phase` = 'cutover' WHERE `id` = 1
SQL (22.3ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:53', `phase` = 'init' WHERE `id` = 1
SQL (0.3ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (3.9ms)  TRUNCATE TABLE `foos_danced`;
SQL (8.5ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.4ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (0.1ms)  BEGIN
SQL (0.2ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:53', 'foos', '2011-09-14 17:38:53', 'foos_danced', NULL, 'init')
SQL (3.9ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.1ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (73.2ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (75.7ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.9ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (175.4ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (134.4ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (142.5ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:53', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:53', `phase` = 'replay' WHERE `id` = 1
SQL (0.6ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:53', `phase` = 'cutover' WHERE `id` = 1
SQL (15.9ms)  COMMIT
TableDancer::TableDanceReplay Load (0.4ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (290.9ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.5ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:54', `phase` = 'complete' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.8ms)  TRUNCATE TABLE `foos`;
SQL (15.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.2ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.2ms)  SHOW TABLES
SQL (94.3ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.5ms)  SHOW TABLES
SQL (2.7ms)  DROP TABLE `foos_decommissioned`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:54', 'foos', '2011-09-14 17:38:54', 'foos_danced', NULL, 'init')
SQL (0.5ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (157.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (140.0ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.4ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.4ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:54', `phase` = 'copy' WHERE `id` = 1
SQL (0.9ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.4ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:54', `phase` = 'replay' WHERE `id` = 1
SQL (0.4ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:54', `phase` = 'cutover' WHERE `id` = 1
SQL (6.6ms)  COMMIT
TableDancer::TableDanceReplay Load (0.3ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.4ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (257.1ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.5ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:55', `phase` = 'complete' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.5ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (0.9ms)  TRUNCATE TABLE `foos`;
SQL (12.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.4ms)  SHOW TABLES
SQL (85.4ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.4ms)  SHOW TABLES
SQL (1.2ms)  DROP TABLE `foos_decommissioned`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:55', 'foos', '2011-09-14 17:38:55', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.2ms)  SET autocommit=0;
SQL (0.3ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (154.5ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (167.7ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (143.7ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:55', `phase` = 'copy' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:55', `phase` = 'replay' WHERE `id` = 1
SQL (1.3ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.0ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:55', `phase` = 'cutover' WHERE `id` = 1
SQL (0.3ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.6ms)  SET autocommit=0;
SQL (0.4ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (299.8ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.5ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:56', `phase` = 'complete' WHERE `id` = 1
SQL (0.7ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
TableDancer::TableDance Load (0.2ms)  SELECT * FROM `table_dances` WHERE (`table_dances`.`id` = 1) 
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (14.8ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.2ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.3ms)  SHOW TABLES
SQL (0.3ms)  SHOW TABLES
SQL (84.3ms)  CREATE TABLE `foos_danced` (`id` int(11) DEFAULT NULL auto_increment PRIMARY KEY, `title` varchar(255)) ENGINE=InnoDB
SQL (0.5ms)  SHOW TABLES
SQL (2.2ms)  DROP TABLE `foos_decommissioned`
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Create (0.2ms)  INSERT INTO `table_dances` (`created_at`, `source_table`, `updated_at`, `dest_table`, `last_copy_id`, `phase`) VALUES('2011-09-14 17:38:56', 'foos', '2011-09-14 17:38:56', 'foos_danced', NULL, 'init')
SQL (0.4ms)  COMMIT
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
 Load (0.2ms)  SELECT * FROM `foos` ORDER BY id DESC LIMIT 1
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_insert;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_update;
SQL (0.1ms)  DROP TRIGGER IF EXISTS foos_after_delete;
SQL (154.7ms)  CREATE TRIGGER foos_after_insert AFTER INSERT ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 1, CURRENT_TIMESTAMP, NEW.id);
SQL (142.8ms)  CREATE TRIGGER foos_after_update AFTER UPDATE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 2, CURRENT_TIMESTAMP, NEW.id);
SQL (159.2ms)  CREATE TRIGGER foos_after_delete AFTER DELETE ON `foos` FOR EACH ROW INSERT INTO table_dance_replays (`table_dance_id`, `instruction`, `event_time`, `source_id`) VALUES (1, 3, CURRENT_TIMESTAMP, OLD.id);
SQL (0.1ms)  BEGIN
SQL (0.3ms)  SHOW TABLES
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:56', `phase` = 'copy' WHERE `id` = 1
SQL (0.8ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
 Load (0.2ms)  SELECT * FROM `foos` WHERE (foos.id >= 0) ORDER BY foos.id ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.2ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:56', `phase` = 'replay' WHERE `id` = 1
SQL (0.5ms)  COMMIT
Begin replay!
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.1ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:56', `phase` = 'cutover' WHERE `id` = 1
SQL (1.2ms)  COMMIT
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  SET autocommit=0;
SQL (0.2ms)  LOCK TABLES `foos` WRITE, `foos_danced` WRITE, `table_dances` WRITE;
TableDancer::TableDanceReplay Load (0.2ms)  SELECT * FROM `table_dance_replays` WHERE ((`table_dance_replays`.`performed` = 0) AND (`table_dance_replays`.table_dance_id = 1)) ORDER BY instruction ASC, event_time ASC LIMIT 1000
SQL (0.1ms)  BEGIN
SQL (285.8ms)  RENAME TABLE `foos` TO `foos_decommissioned`
SQL (1.6ms)  RENAME TABLE `foos_danced` TO `foos`
SQL (0.1ms)  COMMIT
SQL (0.1ms)  BEGIN
TableDancer::TableDance Update (0.3ms)  UPDATE `table_dances` SET `updated_at` = '2011-09-14 17:38:56', `phase` = 'complete' WHERE `id` = 1
SQL (1.2ms)  COMMIT
SQL (0.1ms)  COMMIT;
SQL (0.1ms)  UNLOCK TABLES;
SQL (0.1ms)  SET autocommit=1;
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.4ms)  SHOW TABLES
SQL (1.0ms)  TRUNCATE TABLE `foos`;
SQL (16.2ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (8.3ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.3ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
SQL (0.1ms)  SELECT @@FOREIGN_KEY_CHECKS
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 0
SQL (0.3ms)  SHOW TABLES
SQL (5.4ms)  TRUNCATE TABLE `foos`;
SQL (0.8ms)  TRUNCATE TABLE `foos_decommissioned`;
SQL (7.4ms)  TRUNCATE TABLE `table_dance_replays`;
SQL (8.4ms)  TRUNCATE TABLE `table_dances`;
SQL (0.1ms)  SET FOREIGN_KEY_CHECKS = 1
